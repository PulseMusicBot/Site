package dev.westernpine.lib.properties;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Properties;
import java.util.stream.Collectors;

public class PropertiesFile implements PropertyFile {

    public List<Property> propertyList;

    public String fileName;

    public Properties properties;

    private String[] comments;

    /**
     * Instantiates a new implementation of the PropertyFile interface that manages its properties.
     *
     * @param fileName          The file name of the property file.
     * @param defaultProperties The properties used to save default properties to the file. Check the documentation for {@link PropertyFile#getDeclaredProperties(Class)} for more information on how to get these automatically.
     * @param comments          Any comments at the top of the file.
     * @throws FileNotFoundException if the specified file name doesn't exist.
     * @throws IOException           if there is a problem opening, writing to, or closing the IO stream of the file.
     */
    public PropertiesFile(String fileName, Collection<Property> defaultProperties, String... comments) throws Throwable {
        this.fileName = fileName;
        this.propertyList = new ArrayList<>(defaultProperties);
        this.comments = comments;
        reload();
    }

    /**
     * Loads any existing properties from the designated file. Sets the defaults in memory. Then saves the memory properties to the file.
     *
     * @return An autogenerated property file object based on the default properties.
     * @throws FileNotFoundException if the specified file name doesn't exist.
     * @throws IOException           if there is a problem opening, writing to, or closing the IO stream of the file.
     */
    @Override
    public PropertyFile reload() throws Throwable {
        this.properties = PropertiesUtil.loadSetSave(fileName, propertyList.stream().collect(Collectors.toMap(Property::getIdentifier, Property::getDefaultValue)), comments);
        return this;
    }

    /**
     * Return the current property value.
     *
     * @param property The property type to get.
     * @return The current property value.
     */
    @Override
    public String get(Property property) {
        return properties.get(property.getIdentifier()).toString();
    }

    /**
     * Sets the property's new value, and returns the old value or null if no previous value.
     *
     * @param property The property to set and get the old value of.
     * @param value    The value to set.
     * @return The old value of the property, or null otherwise.
     */
    @Override
    public String set(Property property, String value) {
        String old = properties.get(property.getIdentifier()).toString();
        properties.setProperty(property.getIdentifier(), value);
        return old;
    }

    /**
     * The file name of the generated file.
     *
     * @return The file name.
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * Get the properties object.
     *
     * @return The properties object.
     */
    public Properties getProperties() {
        return properties;
    }

    /**
     * Get the comments to be generated for the generated file.
     *
     * @return The lines of comments.
     */
    public String[] getComments() {
        return comments;
    }

    /**
     * Set the comments to be generated for the file.
     *
     * @param comments The comments to be added to the file.
     */
    public void setComments(String[] comments) {
        this.comments = comments;
    }

}
